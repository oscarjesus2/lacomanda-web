name: CI/CD Pipeline - Frontend

on:
  push:
    branches:
      - master  # Ejecuta el workflow en push a la rama 'master'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'  # Ajusta la versión según la que uses en tu proyecto

    - name: Install dependencies
      run: npm install

   # - name: Run tests
   #   run: npm test -- --watch=false --no-progress --browsers=ChromeHeadless  # Ajusta este comando según tu configuración

    - name: Build Angular app
      run: npm run build -- --configuration production # Construir la aplicación para producción
      
    - name: PRE Delete old artifact
      env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    run: |
      echo "Fetching artifacts from GitHub API..."
      response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ github.repository }}/actions/artifacts)
      echo "$response"  # Agrega esta línea para ver la respuesta completa
      artifacts=$(echo "$response" | jq -r '.artifacts | sort_by(.created_at) | reverse | .[3:] | .[].id')
  
      if [ -z "$artifacts" ]; then
        echo "No artifacts to delete."
      else
        for artifact_id in $artifacts; do
          curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id
          echo "Deleted artifact with ID: $artifact_id"
        done
      fi
        
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-artifact
        path: ./dist/jbs-rest   # Cambia 'jbs-rest' si tu build genera archivos en otro lugar

    - name: Delete old artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        artifacts=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        https://api.github.com/repos/${{ github.repository }}/actions/artifacts \
        | jq -r '.artifacts | sort_by(.created_at) | reverse | .[3:] | .[].id')

        for artifact_id in $artifacts; do
          curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id
          echo "Deleted artifact with ID: $artifact_id"
        done

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-artifact

    - name: Install lftp
      run: sudo apt-get install lftp

    - name: List Built Files
      run: ls -la . # Asegúrate de que esta ruta es correcta

    - name: Deploy to FTP server - Naruto Folder
      run: |
        lftp -e "set ftp:ssl-allow no; 
        open -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} ${{ secrets.FTP_HOST }}; 
        mirror -R . /naruto.jobbusiness.pe; 
        mirror -R . /main.jobbusiness.pe; bye"
